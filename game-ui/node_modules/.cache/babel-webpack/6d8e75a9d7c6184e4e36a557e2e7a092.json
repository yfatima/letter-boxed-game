{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, EventEmitter, Directive, Input, Output, NgModule, Optional } from '@angular/core';\nimport { Chart, Title, Tooltip, Filler, Legend, LineController, LineElement, PointElement, LinearScale, CategoryScale, BarController, BarElement, DoughnutController, ArcElement, RadarController, RadialLinearScale, PieController, PolarAreaController, BubbleController, ScatterController, TimeSeriesScale, defaults } from 'chart.js';\nimport { distinctUntilChanged } from 'rxjs/operators';\nimport { merge } from 'lodash-es';\nimport { BehaviorSubject } from 'rxjs';\n\nclass ThemeService {\n  constructor() {\n    this.colorschemesOptions = new BehaviorSubject(undefined);\n  }\n\n  setColorschemesOptions(options) {\n    this.pColorschemesOptions = options;\n    this.colorschemesOptions.next(options);\n  }\n\n  getColorschemesOptions() {\n    return this.pColorschemesOptions;\n  }\n\n}\n\nThemeService.ɵfac = i0.ɵɵngDeclareFactory({\n  minVersion: \"12.0.0\",\n  version: \"13.1.1\",\n  ngImport: i0,\n  type: ThemeService,\n  deps: [],\n  target: i0.ɵɵFactoryTarget.Injectable\n});\nThemeService.ɵprov = i0.ɵɵngDeclareInjectable({\n  minVersion: \"12.0.0\",\n  version: \"13.1.1\",\n  ngImport: i0,\n  type: ThemeService,\n  providedIn: 'root'\n});\ni0.ɵɵngDeclareClassMetadata({\n  minVersion: \"12.0.0\",\n  version: \"13.1.1\",\n  ngImport: i0,\n  type: ThemeService,\n  decorators: [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }],\n  ctorParameters: function () {\n    return [];\n  }\n});\n\nclass BaseChartDirective {\n  constructor(element, zone, themeService) {\n    this.element = element;\n    this.zone = zone;\n    this.themeService = themeService;\n    this.type = 'bar';\n    this.plugins = [];\n    this.chartClick = new EventEmitter();\n    this.chartHover = new EventEmitter();\n    this.subs = [];\n    this.ctx = element.nativeElement.getContext('2d');\n    this.subs.push(this.themeService.colorschemesOptions.pipe(distinctUntilChanged()).subscribe(r => this.themeChanged(r)));\n  }\n\n  ngOnChanges(changes) {\n    const requireRender = ['type'];\n    const propertyNames = Object.getOwnPropertyNames(changes);\n\n    if (propertyNames.some(key => requireRender.includes(key)) || propertyNames.every(key => changes[key].isFirstChange())) {\n      this.render();\n    } else {\n      const config = this.getChartConfiguration();\n\n      if (this.chart) {\n        Object.assign(this.chart.config.data, config.data);\n        Object.assign(this.chart.config.plugins, config.plugins);\n        Object.assign(this.chart.config.options, config.options);\n      }\n\n      this.update();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.chart) {\n      this.chart.destroy();\n      this.chart = void 0;\n    }\n\n    this.subs.forEach(s => s.unsubscribe());\n  }\n\n  render() {\n    if (this.chart) {\n      this.chart.destroy();\n    }\n\n    return this.zone.runOutsideAngular(() => this.chart = new Chart(this.ctx, this.getChartConfiguration()));\n  }\n\n  update(duration) {\n    if (this.chart) {\n      this.zone.runOutsideAngular(() => {\n        var _a;\n\n        return (_a = this.chart) === null || _a === void 0 ? void 0 : _a.update(duration);\n      });\n    }\n  }\n\n  hideDataset(index, hidden) {\n    if (this.chart) {\n      this.chart.getDatasetMeta(index).hidden = hidden;\n      this.update();\n    }\n  }\n\n  isDatasetHidden(index) {\n    var _a, _b;\n\n    return (_b = (_a = this.chart) === null || _a === void 0 ? void 0 : _a.getDatasetMeta(index)) === null || _b === void 0 ? void 0 : _b.hidden;\n  }\n\n  toBase64Image() {\n    var _a;\n\n    return (_a = this.chart) === null || _a === void 0 ? void 0 : _a.toBase64Image();\n  }\n\n  themeChanged(options) {\n    this.themeOverrides = options;\n\n    if (this.chart) {\n      Object.assign(this.chart.config.options, this.getChartOptions());\n      this.update();\n    }\n  }\n\n  getChartOptions() {\n    return merge({\n      onHover: (event, active) => {\n        if (this.chartHover.observed && active && !active.length) {\n          return;\n        }\n\n        this.zone.run(() => this.chartHover.emit({\n          event,\n          active\n        }));\n      },\n      onClick: (event, active) => {\n        if (!this.chartClick.observed) {\n          return;\n        }\n\n        this.zone.run(() => this.chartClick.emit({\n          event,\n          active\n        }));\n      }\n    }, this.themeOverrides, this.options, {\n      plugins: {\n        legend: {\n          display: this.legend\n        }\n      }\n    });\n  }\n\n  getChartConfiguration() {\n    return {\n      type: this.type,\n      data: this.getChartData(),\n      plugins: this.plugins,\n      options: this.getChartOptions()\n    };\n  }\n\n  getChartData() {\n    return this.data ? this.data : {\n      labels: this.labels || [],\n      datasets: this.datasets || []\n    };\n  }\n\n}\n\nBaseChartDirective.ɵfac = i0.ɵɵngDeclareFactory({\n  minVersion: \"12.0.0\",\n  version: \"13.1.1\",\n  ngImport: i0,\n  type: BaseChartDirective,\n  deps: [{\n    token: i0.ElementRef\n  }, {\n    token: i0.NgZone\n  }, {\n    token: ThemeService\n  }],\n  target: i0.ɵɵFactoryTarget.Directive\n});\nBaseChartDirective.ɵdir = i0.ɵɵdefineDirective({\n  type: BaseChartDirective,\n  selectors: [[\"canvas\", \"baseChart\", \"\"]],\n  inputs: {\n    type: \"type\",\n    legend: \"legend\",\n    data: \"data\",\n    options: \"options\",\n    plugins: \"plugins\",\n    labels: \"labels\",\n    datasets: \"datasets\"\n  },\n  outputs: {\n    chartClick: \"chartClick\",\n    chartHover: \"chartHover\"\n  },\n  exportAs: [\"base-chart\"],\n  features: [i0.ɵɵNgOnChangesFeature]\n});\ni0.ɵɵngDeclareClassMetadata({\n  minVersion: \"12.0.0\",\n  version: \"13.1.1\",\n  ngImport: i0,\n  type: BaseChartDirective,\n  decorators: [{\n    type: Directive,\n    args: [{\n      // eslint-disable-next-line @angular-eslint/directive-selector\n      selector: 'canvas[baseChart]',\n      exportAs: 'base-chart'\n    }]\n  }],\n  ctorParameters: function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i0.NgZone\n    }, {\n      type: ThemeService\n    }];\n  },\n  propDecorators: {\n    type: [{\n      type: Input\n    }],\n    legend: [{\n      type: Input\n    }],\n    data: [{\n      type: Input\n    }],\n    options: [{\n      type: Input\n    }],\n    plugins: [{\n      type: Input\n    }],\n    labels: [{\n      type: Input\n    }],\n    datasets: [{\n      type: Input\n    }],\n    chartClick: [{\n      type: Output\n    }],\n    chartHover: [{\n      type: Output\n    }]\n  }\n});\nconst baseColors = [[255, 99, 132], [54, 162, 235], [255, 206, 86], [231, 233, 237], [75, 192, 192], [151, 187, 205], [220, 220, 220], [247, 70, 74], [70, 191, 189], [253, 180, 92], [148, 159, 177], [77, 83, 96]];\nconst builtInDefaults = {\n  datasets: {\n    line: {\n      backgroundColor: context => rgba(generateColor(context.datasetIndex), 0.4),\n      borderColor: context => rgba(generateColor(context.datasetIndex), 1),\n      pointBackgroundColor: context => rgba(generateColor(context.datasetIndex), 1),\n      pointBorderColor: '#fff',\n      pointHoverBackgroundColor: '#fff',\n      pointHoverBorderColor: context => rgba(generateColor(context.datasetIndex), 0.8)\n    },\n    bar: {\n      backgroundColor: context => rgba(generateColor(context.datasetIndex), 0.6),\n      borderColor: context => rgba(generateColor(context.datasetIndex), 1),\n      hoverBackgroundColor: context => rgba(generateColor(context.datasetIndex), 0.8),\n      hoverBorderColor: context => rgba(generateColor(context.datasetIndex), 1)\n    },\n\n    get radar() {\n      return this.line;\n    },\n\n    doughnut: {\n      backgroundColor: context => rgba(generateColor(context.dataIndex), 0.6),\n      borderColor: '#fff',\n      hoverBackgroundColor: context => rgba(generateColor(context.dataIndex), 1),\n      hoverBorderColor: context => rgba(generateColor(context.dataIndex), 1)\n    },\n\n    get pie() {\n      return this.doughnut;\n    },\n\n    polarArea: {\n      backgroundColor: context => rgba(generateColor(context.dataIndex), 0.6),\n      borderColor: context => rgba(generateColor(context.dataIndex), 1),\n      hoverBackgroundColor: context => rgba(generateColor(context.dataIndex), 0.8),\n      hoverBorderColor: context => rgba(generateColor(context.dataIndex), 1)\n    },\n\n    get bubble() {\n      return this.doughnut;\n    },\n\n    get scatter() {\n      return this.doughnut;\n    },\n\n    get area() {\n      return this.polarArea;\n    }\n\n  }\n};\n\nfunction rgba(colour, alpha) {\n  return 'rgba(' + colour.concat(alpha).join(',') + ')';\n}\n\nfunction getRandomInt(min, max) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nfunction getRandomColor() {\n  return [getRandomInt(0, 255), getRandomInt(0, 255), getRandomInt(0, 255)];\n}\n/**\n * Generate colors\n */\n\n\nfunction generateColor(index = 0) {\n  return baseColors[index] || getRandomColor();\n}\n\nChart.register(Title, Tooltip, Filler, Legend, LineController, LineElement, PointElement, LinearScale, CategoryScale, BarController, BarElement, DoughnutController, ArcElement, RadarController, RadialLinearScale, PieController, PolarAreaController, BubbleController, ScatterController, TimeSeriesScale);\n\nclass NgChartsConfiguration {}\n\nNgChartsConfiguration.ɵfac = i0.ɵɵngDeclareFactory({\n  minVersion: \"12.0.0\",\n  version: \"13.1.1\",\n  ngImport: i0,\n  type: NgChartsConfiguration,\n  deps: [],\n  target: i0.ɵɵFactoryTarget.Injectable\n});\nNgChartsConfiguration.ɵprov = i0.ɵɵngDeclareInjectable({\n  minVersion: \"12.0.0\",\n  version: \"13.1.1\",\n  ngImport: i0,\n  type: NgChartsConfiguration,\n  providedIn: 'root'\n});\ni0.ɵɵngDeclareClassMetadata({\n  minVersion: \"12.0.0\",\n  version: \"13.1.1\",\n  ngImport: i0,\n  type: NgChartsConfiguration,\n  decorators: [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }]\n});\n\nclass NgChartsModule {\n  constructor(config) {\n    if (config === null || config === void 0 ? void 0 : config.plugins) Chart.register(...(config === null || config === void 0 ? void 0 : config.plugins));\n    const ngChartsDefaults = merge(builtInDefaults, (config === null || config === void 0 ? void 0 : config.defaults) || {});\n    defaults.set(ngChartsDefaults);\n  }\n\n  static forRoot(config) {\n    return {\n      ngModule: NgChartsModule,\n      providers: [{\n        provide: NgChartsConfiguration,\n        useValue: config\n      }]\n    };\n  }\n\n}\n\nNgChartsModule.ɵfac = i0.ɵɵngDeclareFactory({\n  minVersion: \"12.0.0\",\n  version: \"13.1.1\",\n  ngImport: i0,\n  type: NgChartsModule,\n  deps: [{\n    token: NgChartsConfiguration,\n    optional: true\n  }],\n  target: i0.ɵɵFactoryTarget.NgModule\n});\nNgChartsModule.ɵmod = i0.ɵɵngDeclareNgModule({\n  minVersion: \"12.0.0\",\n  version: \"13.1.1\",\n  ngImport: i0,\n  type: NgChartsModule,\n  declarations: [BaseChartDirective],\n  exports: [BaseChartDirective]\n});\nNgChartsModule.ɵinj = i0.ɵɵngDeclareInjector({\n  minVersion: \"12.0.0\",\n  version: \"13.1.1\",\n  ngImport: i0,\n  type: NgChartsModule,\n  imports: [[]]\n});\ni0.ɵɵngDeclareClassMetadata({\n  minVersion: \"12.0.0\",\n  version: \"13.1.1\",\n  ngImport: i0,\n  type: NgChartsModule,\n  decorators: [{\n    type: NgModule,\n    args: [{\n      imports: [],\n      declarations: [BaseChartDirective],\n      exports: [BaseChartDirective]\n    }]\n  }],\n  ctorParameters: function () {\n    return [{\n      type: NgChartsConfiguration,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }\n});\n/*\n * Public API Surface of ng2-charts\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BaseChartDirective, NgChartsConfiguration, NgChartsModule, ThemeService, baseColors };","map":{"version":3,"sources":["../../../projects/ng2-charts/src/lib/theme.service.ts","../../../projects/ng2-charts/src/lib/base-chart.directive.ts","../../../projects/ng2-charts/src/lib/base-colors.ts","../../../projects/ng2-charts/src/lib/get-colors.ts","../../../projects/ng2-charts/src/lib/ng-charts.module.ts","../../../projects/ng2-charts/src/public_api.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { ChartConfiguration, ChartOptions } from 'chart.js';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ThemeService {\n  private pColorschemesOptions?: ChartOptions;\n  public colorschemesOptions: BehaviorSubject<ChartOptions | undefined> = new BehaviorSubject<ChartOptions | undefined>(undefined);\n\n  constructor() {\n  }\n\n  setColorschemesOptions(options: ChartConfiguration['options']): void {\n    this.pColorschemesOptions = options;\n    this.colorschemesOptions.next(options);\n  }\n\n  getColorschemesOptions(): ChartConfiguration['options'] {\n    return this.pColorschemesOptions;\n  }\n}\n","import {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  Output,\n  SimpleChanges,\n} from '@angular/core';\nimport { Chart, ChartConfiguration, ChartEvent, ChartType, DefaultDataPoint } from 'chart.js';\n\nimport { ThemeService } from './theme.service';\nimport { Subscription } from 'rxjs';\nimport { distinctUntilChanged } from 'rxjs/operators';\n\nimport { merge } from 'lodash-es';\n\n@Directive({\n  // eslint-disable-next-line @angular-eslint/directive-selector\n  selector: 'canvas[baseChart]',\n  exportAs: 'base-chart',\n})\nexport class BaseChartDirective<TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown> implements OnDestroy, OnChanges {\n\n  @Input() public type: ChartConfiguration<TType, TData, TLabel>['type'] = 'bar' as TType;\n  @Input() public legend?: boolean;\n  @Input() public data?: ChartConfiguration<TType, TData, TLabel>['data'];\n  @Input() public options?: ChartConfiguration<TType, TData, TLabel>['options'];\n  @Input() public plugins?: ChartConfiguration<TType, TData, TLabel>['plugins'] = [];\n\n  @Input() public labels?: ChartConfiguration<TType, TData, TLabel>['data']['labels'];\n  @Input() public datasets?: ChartConfiguration<TType, TData, TLabel>['data']['datasets'];\n\n  @Output() public chartClick: EventEmitter<{ event?: ChartEvent, active?: {}[] }> = new EventEmitter();\n  @Output() public chartHover: EventEmitter<{ event: ChartEvent, active: {}[] }> = new EventEmitter();\n\n  public ctx: string;\n  public chart?: Chart<TType, TData, TLabel>;\n\n  private subs: Subscription[] = [];\n  private themeOverrides: ChartConfiguration['options'];\n\n  public constructor(private element: ElementRef, private zone: NgZone, private themeService: ThemeService) {\n    this.ctx = element.nativeElement.getContext('2d');\n    this.subs.push(this.themeService.colorschemesOptions\n      .pipe(distinctUntilChanged())\n      .subscribe(r => this.themeChanged(r)));\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    const requireRender = [ 'type' ];\n    const propertyNames = Object.getOwnPropertyNames(changes);\n\n    if (propertyNames.some(key => requireRender.includes(key)) ||\n      propertyNames.every(key => changes[key].isFirstChange())\n    ) {\n      this.render();\n    } else {\n      const config = this.getChartConfiguration();\n\n      if (this.chart) {\n        Object.assign(this.chart.config.data, config.data);\n        Object.assign(this.chart.config.plugins, config.plugins);\n        Object.assign(this.chart.config.options, config.options);\n      }\n\n      this.update();\n    }\n  }\n\n  public ngOnDestroy(): void {\n    if (this.chart) {\n      this.chart.destroy();\n      this.chart = void 0;\n    }\n    this.subs.forEach(s => s.unsubscribe());\n  }\n\n  public render(): Chart<TType, TData, TLabel> {\n    if (this.chart) {\n      this.chart.destroy();\n    }\n\n    return this.zone.runOutsideAngular(() => this.chart = new Chart(this.ctx, this.getChartConfiguration()));\n  }\n\n  public update(duration?: any): void {\n    if (this.chart) {\n      this.zone.runOutsideAngular(() => this.chart?.update(duration));\n    }\n  }\n\n  public hideDataset(index: number, hidden: boolean): void {\n    if (this.chart) {\n      this.chart.getDatasetMeta(index).hidden = hidden;\n      this.update();\n    }\n  }\n\n  public isDatasetHidden(index: number): boolean | undefined {\n    return this.chart?.getDatasetMeta(index)?.hidden;\n  }\n\n  public toBase64Image(): string | undefined {\n    return this.chart?.toBase64Image();\n  }\n\n  private themeChanged(options: ChartConfiguration['options']): void {\n    this.themeOverrides = options;\n    if (this.chart) {\n      Object.assign(this.chart.config.options, this.getChartOptions());\n\n      this.update();\n    }\n  }\n\n  private getChartOptions(): ChartConfiguration<TType, TData, TLabel>['options'] {\n    return merge({\n        onHover: (event: ChartEvent, active: {}[]) => {\n          if (this.chartHover.observed && active && !active.length) {\n            return;\n          }\n\n          this.zone.run(() => this.chartHover.emit({ event, active }));\n        },\n        onClick: (event?: ChartEvent, active?: {}[]) => {\n          if(!this.chartClick.observed){\n            return;\n          }\n\n          this.zone.run(() => this.chartClick.emit({ event, active }));\n        }\n      },\n      this.themeOverrides,\n      this.options,\n      {\n        plugins: {\n          legend: {\n            display: this.legend\n          }\n        }\n      });\n  }\n\n  private getChartConfiguration(): ChartConfiguration<TType, TData, TLabel> {\n    return {\n      type: this.type,\n      data: this.getChartData(),\n      plugins: this.plugins,\n      options: this.getChartOptions()\n    };\n  }\n\n  private getChartData(): ChartConfiguration<TType, TData, TLabel>['data'] {\n    return this.data ? this.data : {\n      labels: this.labels || [],\n      datasets: this.datasets || []\n    }\n  }\n}\n","export const baseColors: Array<number[]> = [\n  [255, 99, 132],\n  [54, 162, 235],\n  [255, 206, 86],\n  [231, 233, 237],\n  [75, 192, 192],\n  [151, 187, 205],\n  [220, 220, 220],\n  [247, 70, 74],\n  [70, 191, 189],\n  [253, 180, 92],\n  [148, 159, 177],\n  [77, 83, 96]\n];\n","import { baseColors } from './base-colors';\nimport { Color } from 'chart.js';\n\nexport const builtInDefaults = {\n  datasets: {\n    line: {\n      backgroundColor: (context: any) => rgba(generateColor(context.datasetIndex), 0.4),\n      borderColor: (context: any) => rgba(generateColor(context.datasetIndex), 1),\n      pointBackgroundColor: (context: any) => rgba(generateColor(context.datasetIndex), 1),\n      pointBorderColor: '#fff',\n      pointHoverBackgroundColor: '#fff',\n      pointHoverBorderColor: (context: any) => rgba(generateColor(context.datasetIndex), 0.8)\n    },\n    bar: {\n      backgroundColor: (context: any) => rgba(generateColor(context.datasetIndex), 0.6),\n      borderColor: (context: any) => rgba(generateColor(context.datasetIndex), 1),\n      hoverBackgroundColor: (context: any) => rgba(generateColor(context.datasetIndex), 0.8),\n      hoverBorderColor: (context: any) => rgba(generateColor(context.datasetIndex), 1)\n    },\n    get radar(): {[key: string]: ((context: any) => Color) | Color } {\n      return this.line;\n    },\n    doughnut: {\n      backgroundColor: (context: any) => rgba(generateColor(context.dataIndex), 0.6),\n      borderColor: '#fff',\n      hoverBackgroundColor: (context: any) => rgba(generateColor(context.dataIndex), 1),\n      hoverBorderColor: (context: any) => rgba(generateColor(context.dataIndex), 1)\n    },\n    get pie(): {[key: string]: ((context: any) => Color) | Color } {\n      return this.doughnut;\n    },\n    polarArea: {\n      backgroundColor: (context: any) => rgba(generateColor(context.dataIndex), 0.6),\n      borderColor: (context: any) => rgba(generateColor(context.dataIndex), 1),\n      hoverBackgroundColor: (context: any) => rgba(generateColor(context.dataIndex), 0.8),\n      hoverBorderColor: (context: any) => rgba(generateColor(context.dataIndex), 1)\n    },\n    get bubble(): {[key: string]: ((context: any) => Color) | Color } {\n      return this.doughnut;\n    },\n    get scatter(): {[key: string]: ((context: any) => Color) | Color } {\n      return this.doughnut;\n    },\n    get area(): {[key: string]: ((context: any) => Color) | Color } {\n      return this.polarArea;\n    }\n  }\n};\n\nfunction rgba(colour: Array<number>, alpha: number): Color {\n  return 'rgba(' + colour.concat(alpha).join(',') + ')';\n}\n\nfunction getRandomInt(min: number, max: number): number {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nfunction getRandomColor(): number[] {\n  return [ getRandomInt(0, 255), getRandomInt(0, 255), getRandomInt(0, 255) ];\n}\n\n/**\n * Generate colors\n */\nfunction generateColor(index = 0): number[] {\n  return baseColors[index] || getRandomColor();\n}\n","import { Injectable, ModuleWithProviders, NgModule, Optional } from '@angular/core';\nimport { BaseChartDirective } from './base-chart.directive';\nimport {\n  ArcElement,\n  BarController,\n  BarElement,\n  BubbleController,\n  CategoryScale,\n  Chart,\n  ChartComponentLike,\n  Defaults,\n  defaults,\n  DoughnutController,\n  Filler,\n  Legend,\n  LinearScale,\n  LineController,\n  LineElement,\n  PieController,\n  PointElement,\n  PolarAreaController,\n  RadarController,\n  RadialLinearScale,\n  ScatterController,\n  TimeSeriesScale,\n  Title,\n  Tooltip\n} from 'chart.js';\nimport { merge } from \"lodash-es\";\nimport { builtInDefaults } from \"./get-colors\";\n\nChart.register(\n  Title, Tooltip, Filler, Legend,\n  LineController, LineElement, PointElement, LinearScale, CategoryScale,\n  BarController, BarElement,\n  DoughnutController, ArcElement,\n  RadarController, RadialLinearScale,\n  PieController,\n  PolarAreaController,\n  BubbleController,\n  ScatterController,\n  TimeSeriesScale);\n\n@Injectable({ providedIn: 'root' })\nexport class NgChartsConfiguration {\n  public plugins?: ChartComponentLike[];\n  public defaults?: Partial<Defaults>;\n}\n\n@NgModule({\n  imports: [],\n  declarations: [ BaseChartDirective ],\n  exports: [ BaseChartDirective ]\n})\nexport class NgChartsModule {\n\n  constructor(@Optional() config?: NgChartsConfiguration) {\n    if (config?.plugins)\n      Chart.register(...config?.plugins);\n\n    const ngChartsDefaults = merge(builtInDefaults, config?.defaults || {});\n\n    defaults.set(ngChartsDefaults);\n  }\n\n  public static forRoot(config?: NgChartsConfiguration): ModuleWithProviders<NgChartsModule> {\n    return {\n      ngModule: NgChartsModule,\n      providers: [\n        { provide: NgChartsConfiguration, useValue: config }\n      ]\n    };\n  }\n}\n","/*\n * Public API Surface of ng2-charts\n */\n\nexport * from './lib/ng-charts.module';\nexport * from './lib/base-chart.directive';\nexport * from './lib/theme.service';\nexport * from './lib/base-colors';\n"]},"metadata":{},"sourceType":"module"}